// Copyright 2019-2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: tmaps.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Mask int32

const (
	Mask_UnspecifiedMask Mask = 0
	Mask_IdsMask         Mask = 1
	Mask_RefsMask        Mask = 2
	Mask_TopicsMask      Mask = 3
	Mask_NamesMask       Mask = 4
	Mask_OccurrencesMask Mask = 5
	Mask_ValueMask       Mask = 6
	Mask_ParentMask      Mask = 7
)

// Enum value maps for Mask.
var (
	Mask_name = map[int32]string{
		0: "UnspecifiedMask",
		1: "IdsMask",
		2: "RefsMask",
		3: "TopicsMask",
		4: "NamesMask",
		5: "OccurrencesMask",
		6: "ValueMask",
		7: "ParentMask",
	}
	Mask_value = map[string]int32{
		"UnspecifiedMask": 0,
		"IdsMask":         1,
		"RefsMask":        2,
		"TopicsMask":      3,
		"NamesMask":       4,
		"OccurrencesMask": 5,
		"ValueMask":       6,
		"ParentMask":      7,
	}
)

func (x Mask) Enum() *Mask {
	p := new(Mask)
	*p = x
	return p
}

func (x Mask) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mask) Descriptor() protoreflect.EnumDescriptor {
	return file_tmaps_proto_enumTypes[0].Descriptor()
}

func (Mask) Type() protoreflect.EnumType {
	return &file_tmaps_proto_enumTypes[0]
}

func (x Mask) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mask.Descriptor instead.
func (Mask) EnumDescriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{0}
}

type RefType int32

const (
	RefType_UnspecifiedRefType RefType = 0
	RefType_ItemIdentifier     RefType = 1
	RefType_SubjectIdentifier  RefType = 2
	RefType_SubjectLocator     RefType = 3
)

// Enum value maps for RefType.
var (
	RefType_name = map[int32]string{
		0: "UnspecifiedRefType",
		1: "ItemIdentifier",
		2: "SubjectIdentifier",
		3: "SubjectLocator",
	}
	RefType_value = map[string]int32{
		"UnspecifiedRefType": 0,
		"ItemIdentifier":     1,
		"SubjectIdentifier":  2,
		"SubjectLocator":     3,
	}
)

func (x RefType) Enum() *RefType {
	p := new(RefType)
	*p = x
	return p
}

func (x RefType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RefType) Descriptor() protoreflect.EnumDescriptor {
	return file_tmaps_proto_enumTypes[1].Descriptor()
}

func (RefType) Type() protoreflect.EnumType {
	return &file_tmaps_proto_enumTypes[1]
}

func (x RefType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RefType.Descriptor instead.
func (RefType) EnumDescriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{1}
}

type ItemType int32

const (
	ItemType_UnspecifiedItem ItemType = 0
	ItemType_LibraryItem     ItemType = 1
	ItemType_TopicMapItem    ItemType = 2
	ItemType_TopicItem       ItemType = 3
	ItemType_NameItem        ItemType = 4
	// VariantItem = 5;
	ItemType_OccurrenceItem ItemType = 6
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "UnspecifiedItem",
		1: "LibraryItem",
		2: "TopicMapItem",
		3: "TopicItem",
		4: "NameItem",
		6: "OccurrenceItem",
	}
	ItemType_value = map[string]int32{
		"UnspecifiedItem": 0,
		"LibraryItem":     1,
		"TopicMapItem":    2,
		"TopicItem":       3,
		"NameItem":        4,
		"OccurrenceItem":  6,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_tmaps_proto_enumTypes[2].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_tmaps_proto_enumTypes[2]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{2}
}

type Orderable int32

const (
	Orderable_OrderableUnspecified Orderable = 0
	Orderable_OrderableNames       Orderable = 1
	Orderable_OrderableOccurrences Orderable = 2
)

// Enum value maps for Orderable.
var (
	Orderable_name = map[int32]string{
		0: "OrderableUnspecified",
		1: "OrderableNames",
		2: "OrderableOccurrences",
	}
	Orderable_value = map[string]int32{
		"OrderableUnspecified": 0,
		"OrderableNames":       1,
		"OrderableOccurrences": 2,
	}
)

func (x Orderable) Enum() *Orderable {
	p := new(Orderable)
	*p = x
	return p
}

func (x Orderable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Orderable) Descriptor() protoreflect.EnumDescriptor {
	return file_tmaps_proto_enumTypes[3].Descriptor()
}

func (Orderable) Type() protoreflect.EnumType {
	return &file_tmaps_proto_enumTypes[3]
}

func (x Orderable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Orderable.Descriptor instead.
func (Orderable) EnumDescriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{3}
}

type Library struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapIds []uint64 `protobuf:"varint,1,rep,packed,name=topic_map_ids,json=topicMapIds,proto3" json:"topic_map_ids,omitempty"`
}

func (x *Library) Reset() {
	*x = Library{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Library) ProtoMessage() {}

func (x *Library) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Library.ProtoReflect.Descriptor instead.
func (*Library) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{0}
}

func (x *Library) GetTopicMapIds() []uint64 {
	if x != nil {
		return x.TopicMapIds
	}
	return nil
}

type TopicMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic   *Topic `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	InTrash bool   `protobuf:"varint,3,opt,name=in_trash,json=inTrash,proto3" json:"in_trash,omitempty"`
}

func (x *TopicMap) Reset() {
	*x = TopicMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicMap) ProtoMessage() {}

func (x *TopicMap) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicMap.ProtoReflect.Descriptor instead.
func (*TopicMap) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{1}
}

func (x *TopicMap) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TopicMap) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *TopicMap) GetInTrash() bool {
	if x != nil {
		return x.InTrash
	}
	return false
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapId    uint64        `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	Id            uint64        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Names         []*Name       `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Occurrences   []*Occurrence `protobuf:"bytes,4,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	NameIds       []uint64      `protobuf:"varint,5,rep,packed,name=name_ids,json=nameIds,proto3" json:"name_ids,omitempty"`
	OccurrenceIds []uint64      `protobuf:"varint,6,rep,packed,name=occurrence_ids,json=occurrenceIds,proto3" json:"occurrence_ids,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{2}
}

func (x *Topic) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *Topic) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Topic) GetNames() []*Name {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Topic) GetOccurrences() []*Occurrence {
	if x != nil {
		return x.Occurrences
	}
	return nil
}

func (x *Topic) GetNameIds() []uint64 {
	if x != nil {
		return x.NameIds
	}
	return nil
}

func (x *Topic) GetOccurrenceIds() []uint64 {
	if x != nil {
		return x.OccurrenceIds
	}
	return nil
}

type Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapId uint64 `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	ParentId   uint64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Id         uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Value      string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Name) Reset() {
	*x = Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Name) ProtoMessage() {}

func (x *Name) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Name.ProtoReflect.Descriptor instead.
func (*Name) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{3}
}

func (x *Name) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *Name) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Name) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Name) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Occurrence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapId uint64 `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	ParentId   uint64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Id         uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Value      string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Occurrence) Reset() {
	*x = Occurrence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Occurrence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Occurrence) ProtoMessage() {}

func (x *Occurrence) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Occurrence.ProtoReflect.Descriptor instead.
func (*Occurrence) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{4}
}

func (x *Occurrence) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *Occurrence) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Occurrence) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Occurrence) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TupleSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tuples []*Tuple `protobuf:"bytes,1,rep,name=tuples,proto3" json:"tuples,omitempty"`
}

func (x *TupleSequence) Reset() {
	*x = TupleSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleSequence) ProtoMessage() {}

func (x *TupleSequence) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleSequence.ProtoReflect.Descriptor instead.
func (*TupleSequence) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{5}
}

func (x *TupleSequence) GetTuples() []*Tuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

type Tuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*AnyItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Tuple) Reset() {
	*x = Tuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tuple) ProtoMessage() {}

func (x *Tuple) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tuple.ProtoReflect.Descriptor instead.
func (*Tuple) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{6}
}

func (x *Tuple) GetItems() []*AnyItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type AnyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapId    uint64     `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	ItemId        uint64     `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	ItemType      ItemType   `protobuf:"varint,3,opt,name=item_type,json=itemType,proto3,enum=notemaps.tmaps.pb.ItemType" json:"item_type,omitempty"`
	Refs          []*Ref     `protobuf:"bytes,4,rep,name=refs,proto3" json:"refs,omitempty"`
	NameIds       []uint64   `protobuf:"varint,5,rep,packed,name=name_ids,json=nameIds,proto3" json:"name_ids,omitempty"`
	Names         []*AnyItem `protobuf:"bytes,6,rep,name=names,proto3" json:"names,omitempty"`
	OccurrenceIds []uint64   `protobuf:"varint,7,rep,packed,name=occurrence_ids,json=occurrenceIds,proto3" json:"occurrence_ids,omitempty"`
	Occurrences   []*AnyItem `protobuf:"bytes,8,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	Value         string     `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"`
	TypeRef       *Ref       `protobuf:"bytes,10,opt,name=type_ref,json=typeRef,proto3" json:"type_ref,omitempty"`
	RoleIds       []uint64   `protobuf:"varint,12,rep,packed,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	Roles         []*AnyItem `protobuf:"bytes,13,rep,name=roles,proto3" json:"roles,omitempty"`
	PlayerRef     *Ref       `protobuf:"bytes,11,opt,name=player_ref,json=playerRef,proto3" json:"player_ref,omitempty"`
}

func (x *AnyItem) Reset() {
	*x = AnyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyItem) ProtoMessage() {}

func (x *AnyItem) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyItem.ProtoReflect.Descriptor instead.
func (*AnyItem) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{7}
}

func (x *AnyItem) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *AnyItem) GetItemId() uint64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AnyItem) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_UnspecifiedItem
}

func (x *AnyItem) GetRefs() []*Ref {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *AnyItem) GetNameIds() []uint64 {
	if x != nil {
		return x.NameIds
	}
	return nil
}

func (x *AnyItem) GetNames() []*AnyItem {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *AnyItem) GetOccurrenceIds() []uint64 {
	if x != nil {
		return x.OccurrenceIds
	}
	return nil
}

func (x *AnyItem) GetOccurrences() []*AnyItem {
	if x != nil {
		return x.Occurrences
	}
	return nil
}

func (x *AnyItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AnyItem) GetTypeRef() *Ref {
	if x != nil {
		return x.TypeRef
	}
	return nil
}

func (x *AnyItem) GetRoleIds() []uint64 {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

func (x *AnyItem) GetRoles() []*AnyItem {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AnyItem) GetPlayerRef() *Ref {
	if x != nil {
		return x.PlayerRef
	}
	return nil
}

type Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RefType `protobuf:"varint,1,opt,name=type,proto3,enum=notemaps.tmaps.pb.RefType" json:"type,omitempty"`
	Iri  string  `protobuf:"bytes,2,opt,name=iri,proto3" json:"iri,omitempty"`
}

func (x *Ref) Reset() {
	*x = Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref) ProtoMessage() {}

func (x *Ref) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref.ProtoReflect.Descriptor instead.
func (*Ref) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{8}
}

func (x *Ref) GetType() RefType {
	if x != nil {
		return x.Type
	}
	return RefType_UnspecifiedRefType
}

func (x *Ref) GetIri() string {
	if x != nil {
		return x.Iri
	}
	return ""
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Specific:
	//	*Item_Library
	//	*Item_TopicMap
	//	*Item_Topic
	//	*Item_Name
	//	*Item_Occurrence
	Specific isItem_Specific `protobuf_oneof:"specific"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{9}
}

func (m *Item) GetSpecific() isItem_Specific {
	if m != nil {
		return m.Specific
	}
	return nil
}

func (x *Item) GetLibrary() *Library {
	if x, ok := x.GetSpecific().(*Item_Library); ok {
		return x.Library
	}
	return nil
}

func (x *Item) GetTopicMap() *TopicMap {
	if x, ok := x.GetSpecific().(*Item_TopicMap); ok {
		return x.TopicMap
	}
	return nil
}

func (x *Item) GetTopic() *Topic {
	if x, ok := x.GetSpecific().(*Item_Topic); ok {
		return x.Topic
	}
	return nil
}

func (x *Item) GetName() *Name {
	if x, ok := x.GetSpecific().(*Item_Name); ok {
		return x.Name
	}
	return nil
}

func (x *Item) GetOccurrence() *Occurrence {
	if x, ok := x.GetSpecific().(*Item_Occurrence); ok {
		return x.Occurrence
	}
	return nil
}

type isItem_Specific interface {
	isItem_Specific()
}

type Item_Library struct {
	Library *Library `protobuf:"bytes,1,opt,name=library,proto3,oneof"`
}

type Item_TopicMap struct {
	TopicMap *TopicMap `protobuf:"bytes,2,opt,name=topic_map,json=topicMap,proto3,oneof"`
}

type Item_Topic struct {
	Topic *Topic `protobuf:"bytes,3,opt,name=topic,proto3,oneof"`
}

type Item_Name struct {
	Name *Name `protobuf:"bytes,4,opt,name=name,proto3,oneof"`
}

type Item_Occurrence struct {
	// Variant variant = 5;
	Occurrence *Occurrence `protobuf:"bytes,6,opt,name=occurrence,proto3,oneof"`
}

func (*Item_Library) isItem_Specific() {}

func (*Item_TopicMap) isItem_Specific() {}

func (*Item_Topic) isItem_Specific() {}

func (*Item_Name) isItem_Specific() {}

func (*Item_Occurrence) isItem_Specific() {}

type LoadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If necessary, identifies the topic map that contains the item to load.
	TopicMapId uint64 `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	// Identifies the item to load.
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Specifies which type of item to load. For items that can be reified by a
	// topic, there are multiple valid types for the same id.
	ItemType ItemType `protobuf:"varint,3,opt,name=item_type,json=itemType,proto3,enum=notemaps.tmaps.pb.ItemType" json:"item_type,omitempty"`
}

func (x *LoadRequest) Reset() {
	*x = LoadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadRequest) ProtoMessage() {}

func (x *LoadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadRequest.ProtoReflect.Descriptor instead.
func (*LoadRequest) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{10}
}

func (x *LoadRequest) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *LoadRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoadRequest) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_UnspecifiedItem
}

type LoadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *Item `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *LoadResponse) Reset() {
	*x = LoadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadResponse) ProtoMessage() {}

func (x *LoadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadResponse.ProtoReflect.Descriptor instead.
func (*LoadResponse) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{11}
}

func (x *LoadResponse) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapIds []uint64 `protobuf:"varint,1,rep,packed,name=topic_map_ids,json=topicMapIds,proto3" json:"topic_map_ids,omitempty"`
	Tmql        string   `protobuf:"bytes,2,opt,name=tmql,proto3" json:"tmql,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{12}
}

func (x *SearchRequest) GetTopicMapIds() []uint64 {
	if x != nil {
		return x.TopicMapIds
	}
	return nil
}

func (x *SearchRequest) GetTmql() string {
	if x != nil {
		return x.Tmql
	}
	return ""
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items  []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Count  uint64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset uint64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{13}
}

func (x *SearchResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchResponse) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadRequests   []*LoadRequest   `protobuf:"bytes,1,rep,name=load_requests,json=loadRequests,proto3" json:"load_requests,omitempty"`
	SearchRequests []*SearchRequest `protobuf:"bytes,2,rep,name=search_requests,json=searchRequests,proto3" json:"search_requests,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{14}
}

func (x *QueryRequest) GetLoadRequests() []*LoadRequest {
	if x != nil {
		return x.LoadRequests
	}
	return nil
}

func (x *QueryRequest) GetSearchRequests() []*SearchRequest {
	if x != nil {
		return x.SearchRequests
	}
	return nil
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadResponses   []*LoadResponse   `protobuf:"bytes,1,rep,name=load_responses,json=loadResponses,proto3" json:"load_responses,omitempty"`
	SearchResponses []*SearchResponse `protobuf:"bytes,2,rep,name=search_responses,json=searchResponses,proto3" json:"search_responses,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{15}
}

func (x *QueryResponse) GetLoadResponses() []*LoadResponse {
	if x != nil {
		return x.LoadResponses
	}
	return nil
}

func (x *QueryResponse) GetSearchResponses() []*SearchResponse {
	if x != nil {
		return x.SearchResponses
	}
	return nil
}

type CreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// May be zero only if type is TopicMap.
	TopicMapId uint64 `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	// May be zero only if type is TopicMap.
	Parent uint64 `protobuf:"varint,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// Must not be Library.
	ItemType ItemType `protobuf:"varint,3,opt,name=item_type,json=itemType,proto3,enum=notemaps.tmaps.pb.ItemType" json:"item_type,omitempty"`
}

func (x *CreationRequest) Reset() {
	*x = CreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreationRequest) ProtoMessage() {}

func (x *CreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreationRequest.ProtoReflect.Descriptor instead.
func (*CreationRequest) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{16}
}

func (x *CreationRequest) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *CreationRequest) GetParent() uint64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

func (x *CreationRequest) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_UnspecifiedItem
}

type UpdateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapId uint64    `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	Id         uint64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Orderable  Orderable `protobuf:"varint,4,opt,name=orderable,proto3,enum=notemaps.tmaps.pb.Orderable" json:"orderable,omitempty"`
	SrcIndices []uint32  `protobuf:"varint,5,rep,packed,name=src_indices,json=srcIndices,proto3" json:"src_indices,omitempty"`
	DstIndices []uint32  `protobuf:"varint,6,rep,packed,name=dst_indices,json=dstIndices,proto3" json:"dst_indices,omitempty"`
}

func (x *UpdateOrderRequest) Reset() {
	*x = UpdateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderRequest) ProtoMessage() {}

func (x *UpdateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateOrderRequest) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *UpdateOrderRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrderRequest) GetOrderable() Orderable {
	if x != nil {
		return x.Orderable
	}
	return Orderable_OrderableUnspecified
}

func (x *UpdateOrderRequest) GetSrcIndices() []uint32 {
	if x != nil {
		return x.SrcIndices
	}
	return nil
}

func (x *UpdateOrderRequest) GetDstIndices() []uint32 {
	if x != nil {
		return x.DstIndices
	}
	return nil
}

type UpdateValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapId uint64   `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	Id         uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ItemType   ItemType `protobuf:"varint,3,opt,name=item_type,json=itemType,proto3,enum=notemaps.tmaps.pb.ItemType" json:"item_type,omitempty"`
	Value      string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UpdateValueRequest) Reset() {
	*x = UpdateValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValueRequest) ProtoMessage() {}

func (x *UpdateValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValueRequest.ProtoReflect.Descriptor instead.
func (*UpdateValueRequest) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateValueRequest) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *UpdateValueRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateValueRequest) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_UnspecifiedItem
}

func (x *UpdateValueRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapId uint64 `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	Id         uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Item       *Item  `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateResponse) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *UpdateResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateResponse) GetItem() *Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type DeletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapId uint64   `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	Id         uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ItemType   ItemType `protobuf:"varint,3,opt,name=item_type,json=itemType,proto3,enum=notemaps.tmaps.pb.ItemType" json:"item_type,omitempty"`
}

func (x *DeletionRequest) Reset() {
	*x = DeletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletionRequest) ProtoMessage() {}

func (x *DeletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletionRequest.ProtoReflect.Descriptor instead.
func (*DeletionRequest) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{20}
}

func (x *DeletionRequest) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *DeletionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeletionRequest) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_UnspecifiedItem
}

type DeletionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicMapId uint64   `protobuf:"varint,1,opt,name=topic_map_id,json=topicMapId,proto3" json:"topic_map_id,omitempty"`
	Id         uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ItemType   ItemType `protobuf:"varint,3,opt,name=item_type,json=itemType,proto3,enum=notemaps.tmaps.pb.ItemType" json:"item_type,omitempty"`
}

func (x *DeletionResponse) Reset() {
	*x = DeletionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletionResponse) ProtoMessage() {}

func (x *DeletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletionResponse.ProtoReflect.Descriptor instead.
func (*DeletionResponse) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{21}
}

func (x *DeletionResponse) GetTopicMapId() uint64 {
	if x != nil {
		return x.TopicMapId
	}
	return 0
}

func (x *DeletionResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeletionResponse) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_UnspecifiedItem
}

type MutationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationRequests    []*CreationRequest    `protobuf:"bytes,1,rep,name=creation_requests,json=creationRequests,proto3" json:"creation_requests,omitempty"`
	UpdateOrderRequests []*UpdateOrderRequest `protobuf:"bytes,2,rep,name=update_order_requests,json=updateOrderRequests,proto3" json:"update_order_requests,omitempty"`
	UpdateValueRequests []*UpdateValueRequest `protobuf:"bytes,3,rep,name=update_value_requests,json=updateValueRequests,proto3" json:"update_value_requests,omitempty"`
	DeletionRequests    []*DeletionRequest    `protobuf:"bytes,4,rep,name=deletion_requests,json=deletionRequests,proto3" json:"deletion_requests,omitempty"`
}

func (x *MutationRequest) Reset() {
	*x = MutationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationRequest) ProtoMessage() {}

func (x *MutationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationRequest.ProtoReflect.Descriptor instead.
func (*MutationRequest) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{22}
}

func (x *MutationRequest) GetCreationRequests() []*CreationRequest {
	if x != nil {
		return x.CreationRequests
	}
	return nil
}

func (x *MutationRequest) GetUpdateOrderRequests() []*UpdateOrderRequest {
	if x != nil {
		return x.UpdateOrderRequests
	}
	return nil
}

func (x *MutationRequest) GetUpdateValueRequests() []*UpdateValueRequest {
	if x != nil {
		return x.UpdateValueRequests
	}
	return nil
}

func (x *MutationRequest) GetDeletionRequests() []*DeletionRequest {
	if x != nil {
		return x.DeletionRequests
	}
	return nil
}

type MutationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationResponses    []*UpdateResponse   `protobuf:"bytes,1,rep,name=creation_responses,json=creationResponses,proto3" json:"creation_responses,omitempty"`
	UpdateOrderResponses []*UpdateResponse   `protobuf:"bytes,2,rep,name=update_order_responses,json=updateOrderResponses,proto3" json:"update_order_responses,omitempty"`
	UpdateValueResponses []*UpdateResponse   `protobuf:"bytes,3,rep,name=update_value_responses,json=updateValueResponses,proto3" json:"update_value_responses,omitempty"`
	DeletionResponses    []*DeletionResponse `protobuf:"bytes,4,rep,name=deletion_responses,json=deletionResponses,proto3" json:"deletion_responses,omitempty"`
}

func (x *MutationResponse) Reset() {
	*x = MutationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tmaps_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutationResponse) ProtoMessage() {}

func (x *MutationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tmaps_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutationResponse.ProtoReflect.Descriptor instead.
func (*MutationResponse) Descriptor() ([]byte, []int) {
	return file_tmaps_proto_rawDescGZIP(), []int{23}
}

func (x *MutationResponse) GetCreationResponses() []*UpdateResponse {
	if x != nil {
		return x.CreationResponses
	}
	return nil
}

func (x *MutationResponse) GetUpdateOrderResponses() []*UpdateResponse {
	if x != nil {
		return x.UpdateOrderResponses
	}
	return nil
}

func (x *MutationResponse) GetUpdateValueResponses() []*UpdateResponse {
	if x != nil {
		return x.UpdateValueResponses
	}
	return nil
}

func (x *MutationResponse) GetDeletionResponses() []*DeletionResponse {
	if x != nil {
		return x.DeletionResponses
	}
	return nil
}

var File_tmaps_proto protoreflect.FileDescriptor

var file_tmaps_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e,
	0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62,
	0x22, 0x2d, 0x0a, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x22,
	0x65, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x73, 0x68, 0x22, 0xeb, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61,
	0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x71, 0x0a, 0x0a, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73,
	0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52,
	0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x05, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0xa9, 0x04, 0x0a, 0x07, 0x41, 0x6e, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61,
	0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e,
	0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d,
	0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x79,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65,
	0x66, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e,
	0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x66, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x47,
	0x0a, 0x03, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x72, 0x69, 0x22, 0xa8, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x36, 0x0a, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61,
	0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74,
	0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e,
	0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x22, 0x79, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61,
	0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a,
	0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x47, 0x0a, 0x0d, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x6d, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x6d, 0x71, 0x6c, 0x22, 0x6d, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e,
	0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61,
	0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70,
	0x62, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x4c, 0x0a,
	0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f,
	0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x72, 0x63, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61,
	0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x6f, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73,
	0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0x7d, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x7e, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xe9, 0x02, 0x0a, 0x0f, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d,
	0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61,
	0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d,
	0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x4f,
	0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0xea, 0x02, 0x0a, 0x10, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70,
	0x73, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70,
	0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x74, 0x6d, 0x61, 0x70, 0x73,
	0x2e, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x6d, 0x61, 0x70, 0x73, 0x2e,
	0x74, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x2a, 0x89, 0x01, 0x0a,
	0x04, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x64,
	0x73, 0x4d, 0x61, 0x73, 0x6b, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x73, 0x4d,
	0x61, 0x73, 0x6b, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x4d,
	0x61, 0x73, 0x6b, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x4d, 0x61,
	0x73, 0x6b, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x10, 0x07, 0x2a, 0x60, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x52, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x03, 0x2a, 0x73, 0x0a, 0x08, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x4d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x06, 0x2a,
	0x53, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x10, 0x02, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x2d, 0x6d,
	0x61, 0x70, 0x73, 0x2f, 0x74, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tmaps_proto_rawDescOnce sync.Once
	file_tmaps_proto_rawDescData = file_tmaps_proto_rawDesc
)

func file_tmaps_proto_rawDescGZIP() []byte {
	file_tmaps_proto_rawDescOnce.Do(func() {
		file_tmaps_proto_rawDescData = protoimpl.X.CompressGZIP(file_tmaps_proto_rawDescData)
	})
	return file_tmaps_proto_rawDescData
}

var file_tmaps_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tmaps_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_tmaps_proto_goTypes = []interface{}{
	(Mask)(0),                  // 0: notemaps.tmaps.pb.Mask
	(RefType)(0),               // 1: notemaps.tmaps.pb.RefType
	(ItemType)(0),              // 2: notemaps.tmaps.pb.ItemType
	(Orderable)(0),             // 3: notemaps.tmaps.pb.Orderable
	(*Library)(nil),            // 4: notemaps.tmaps.pb.Library
	(*TopicMap)(nil),           // 5: notemaps.tmaps.pb.TopicMap
	(*Topic)(nil),              // 6: notemaps.tmaps.pb.Topic
	(*Name)(nil),               // 7: notemaps.tmaps.pb.Name
	(*Occurrence)(nil),         // 8: notemaps.tmaps.pb.Occurrence
	(*TupleSequence)(nil),      // 9: notemaps.tmaps.pb.TupleSequence
	(*Tuple)(nil),              // 10: notemaps.tmaps.pb.Tuple
	(*AnyItem)(nil),            // 11: notemaps.tmaps.pb.AnyItem
	(*Ref)(nil),                // 12: notemaps.tmaps.pb.Ref
	(*Item)(nil),               // 13: notemaps.tmaps.pb.Item
	(*LoadRequest)(nil),        // 14: notemaps.tmaps.pb.LoadRequest
	(*LoadResponse)(nil),       // 15: notemaps.tmaps.pb.LoadResponse
	(*SearchRequest)(nil),      // 16: notemaps.tmaps.pb.SearchRequest
	(*SearchResponse)(nil),     // 17: notemaps.tmaps.pb.SearchResponse
	(*QueryRequest)(nil),       // 18: notemaps.tmaps.pb.QueryRequest
	(*QueryResponse)(nil),      // 19: notemaps.tmaps.pb.QueryResponse
	(*CreationRequest)(nil),    // 20: notemaps.tmaps.pb.CreationRequest
	(*UpdateOrderRequest)(nil), // 21: notemaps.tmaps.pb.UpdateOrderRequest
	(*UpdateValueRequest)(nil), // 22: notemaps.tmaps.pb.UpdateValueRequest
	(*UpdateResponse)(nil),     // 23: notemaps.tmaps.pb.UpdateResponse
	(*DeletionRequest)(nil),    // 24: notemaps.tmaps.pb.DeletionRequest
	(*DeletionResponse)(nil),   // 25: notemaps.tmaps.pb.DeletionResponse
	(*MutationRequest)(nil),    // 26: notemaps.tmaps.pb.MutationRequest
	(*MutationResponse)(nil),   // 27: notemaps.tmaps.pb.MutationResponse
}
var file_tmaps_proto_depIdxs = []int32{
	6,  // 0: notemaps.tmaps.pb.TopicMap.topic:type_name -> notemaps.tmaps.pb.Topic
	7,  // 1: notemaps.tmaps.pb.Topic.names:type_name -> notemaps.tmaps.pb.Name
	8,  // 2: notemaps.tmaps.pb.Topic.occurrences:type_name -> notemaps.tmaps.pb.Occurrence
	10, // 3: notemaps.tmaps.pb.TupleSequence.tuples:type_name -> notemaps.tmaps.pb.Tuple
	11, // 4: notemaps.tmaps.pb.Tuple.items:type_name -> notemaps.tmaps.pb.AnyItem
	2,  // 5: notemaps.tmaps.pb.AnyItem.item_type:type_name -> notemaps.tmaps.pb.ItemType
	12, // 6: notemaps.tmaps.pb.AnyItem.refs:type_name -> notemaps.tmaps.pb.Ref
	11, // 7: notemaps.tmaps.pb.AnyItem.names:type_name -> notemaps.tmaps.pb.AnyItem
	11, // 8: notemaps.tmaps.pb.AnyItem.occurrences:type_name -> notemaps.tmaps.pb.AnyItem
	12, // 9: notemaps.tmaps.pb.AnyItem.type_ref:type_name -> notemaps.tmaps.pb.Ref
	11, // 10: notemaps.tmaps.pb.AnyItem.roles:type_name -> notemaps.tmaps.pb.AnyItem
	12, // 11: notemaps.tmaps.pb.AnyItem.player_ref:type_name -> notemaps.tmaps.pb.Ref
	1,  // 12: notemaps.tmaps.pb.Ref.type:type_name -> notemaps.tmaps.pb.RefType
	4,  // 13: notemaps.tmaps.pb.Item.library:type_name -> notemaps.tmaps.pb.Library
	5,  // 14: notemaps.tmaps.pb.Item.topic_map:type_name -> notemaps.tmaps.pb.TopicMap
	6,  // 15: notemaps.tmaps.pb.Item.topic:type_name -> notemaps.tmaps.pb.Topic
	7,  // 16: notemaps.tmaps.pb.Item.name:type_name -> notemaps.tmaps.pb.Name
	8,  // 17: notemaps.tmaps.pb.Item.occurrence:type_name -> notemaps.tmaps.pb.Occurrence
	2,  // 18: notemaps.tmaps.pb.LoadRequest.item_type:type_name -> notemaps.tmaps.pb.ItemType
	13, // 19: notemaps.tmaps.pb.LoadResponse.item:type_name -> notemaps.tmaps.pb.Item
	13, // 20: notemaps.tmaps.pb.SearchResponse.items:type_name -> notemaps.tmaps.pb.Item
	14, // 21: notemaps.tmaps.pb.QueryRequest.load_requests:type_name -> notemaps.tmaps.pb.LoadRequest
	16, // 22: notemaps.tmaps.pb.QueryRequest.search_requests:type_name -> notemaps.tmaps.pb.SearchRequest
	15, // 23: notemaps.tmaps.pb.QueryResponse.load_responses:type_name -> notemaps.tmaps.pb.LoadResponse
	17, // 24: notemaps.tmaps.pb.QueryResponse.search_responses:type_name -> notemaps.tmaps.pb.SearchResponse
	2,  // 25: notemaps.tmaps.pb.CreationRequest.item_type:type_name -> notemaps.tmaps.pb.ItemType
	3,  // 26: notemaps.tmaps.pb.UpdateOrderRequest.orderable:type_name -> notemaps.tmaps.pb.Orderable
	2,  // 27: notemaps.tmaps.pb.UpdateValueRequest.item_type:type_name -> notemaps.tmaps.pb.ItemType
	13, // 28: notemaps.tmaps.pb.UpdateResponse.item:type_name -> notemaps.tmaps.pb.Item
	2,  // 29: notemaps.tmaps.pb.DeletionRequest.item_type:type_name -> notemaps.tmaps.pb.ItemType
	2,  // 30: notemaps.tmaps.pb.DeletionResponse.item_type:type_name -> notemaps.tmaps.pb.ItemType
	20, // 31: notemaps.tmaps.pb.MutationRequest.creation_requests:type_name -> notemaps.tmaps.pb.CreationRequest
	21, // 32: notemaps.tmaps.pb.MutationRequest.update_order_requests:type_name -> notemaps.tmaps.pb.UpdateOrderRequest
	22, // 33: notemaps.tmaps.pb.MutationRequest.update_value_requests:type_name -> notemaps.tmaps.pb.UpdateValueRequest
	24, // 34: notemaps.tmaps.pb.MutationRequest.deletion_requests:type_name -> notemaps.tmaps.pb.DeletionRequest
	23, // 35: notemaps.tmaps.pb.MutationResponse.creation_responses:type_name -> notemaps.tmaps.pb.UpdateResponse
	23, // 36: notemaps.tmaps.pb.MutationResponse.update_order_responses:type_name -> notemaps.tmaps.pb.UpdateResponse
	23, // 37: notemaps.tmaps.pb.MutationResponse.update_value_responses:type_name -> notemaps.tmaps.pb.UpdateResponse
	25, // 38: notemaps.tmaps.pb.MutationResponse.deletion_responses:type_name -> notemaps.tmaps.pb.DeletionResponse
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_tmaps_proto_init() }
func file_tmaps_proto_init() {
	if File_tmaps_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tmaps_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Library); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Occurrence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tmaps_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tmaps_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Item_Library)(nil),
		(*Item_TopicMap)(nil),
		(*Item_Topic)(nil),
		(*Item_Name)(nil),
		(*Item_Occurrence)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tmaps_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tmaps_proto_goTypes,
		DependencyIndexes: file_tmaps_proto_depIdxs,
		EnumInfos:         file_tmaps_proto_enumTypes,
		MessageInfos:      file_tmaps_proto_msgTypes,
	}.Build()
	File_tmaps_proto = out.File
	file_tmaps_proto_rawDesc = nil
	file_tmaps_proto_goTypes = nil
	file_tmaps_proto_depIdxs = nil
}
