// Copyright 2019-2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package notemaps.tmaps.pb;

option go_package = "github.com/google/note-maps/tmaps/pb";

message Library { repeated uint64 topic_map_ids = 1; }

enum Mask {
  UnspecifiedMask = 0;
  IdsMask = 1;
  RefsMask = 2;
  TopicsMask = 3;
  NamesMask = 4;
  OccurrencesMask = 5;
  ValueMask = 6;
  ParentMask = 7;
}

message TopicMap {
  uint64 id = 1;
  Topic topic = 2;
  bool in_trash = 3;
}

message Topic {
  uint64 topic_map_id = 1;
  uint64 id = 2;
  repeated Name names = 3;
  repeated Occurrence occurrences = 4;
  repeated uint64 name_ids = 5;
  repeated uint64 occurrence_ids = 6;
}

message Name {
  uint64 topic_map_id = 1;
  uint64 parent_id = 2;
  uint64 id = 3;
  string value = 4;
}

message Occurrence {
  uint64 topic_map_id = 1;
  uint64 parent_id = 2;
  uint64 id = 3;
  string value = 4;
}

message TupleSequence { repeated Tuple tuples = 1; }

message Tuple { repeated AnyItem items = 1; }

message AnyItem {
  uint64 topic_map_id = 1;
  uint64 item_id = 2;
  ItemType item_type = 3;
  repeated Ref refs = 4;
  repeated uint64 name_ids = 5;
  repeated AnyItem names = 6;
  repeated uint64 occurrence_ids = 7;
  repeated AnyItem occurrences = 8;
  string value = 9;
  Ref type_ref = 10;
  repeated uint64 role_ids = 12;
  repeated AnyItem roles = 13;
  Ref player_ref = 11;
}

message Ref {
  RefType type = 1;
  string iri = 2;
}

enum RefType {
  UnspecifiedRefType = 0;
  ItemIdentifier = 1;
  SubjectIdentifier = 2;
  SubjectLocator = 3;
}

enum ItemType {
  UnspecifiedItem = 0;
  LibraryItem = 1;
  TopicMapItem = 2;
  TopicItem = 3;
  NameItem = 4;
  // VariantItem = 5;
  OccurrenceItem = 6;
  // AssociationItem = 7;
  // RoleItem = 8;
}

message Item {
  oneof specific {
    Library library = 1;
    TopicMap topic_map = 2;
    Topic topic = 3;
    Name name = 4;
    // Variant variant = 5;
    Occurrence occurrence = 6;
    // Association association = 7;
    // Role role = 8;
  }
}

message LoadRequest {
  // If necessary, identifies the topic map that contains the item to load.
  uint64 topic_map_id = 1;

  // Identifies the item to load.
  uint64 id = 2;

  // Specifies which type of item to load. For items that can be reified by a
  // topic, there are multiple valid types for the same id.
  ItemType item_type = 3;
}

message LoadResponse { Item item = 1; }

message SearchRequest {
  repeated uint64 topic_map_ids = 1;
  string tmql = 2;
}

message SearchResponse {
  repeated Item items = 1;
  uint64 count = 2;
  uint64 offset = 3;
}

message QueryRequest {
  repeated LoadRequest load_requests = 1;
  repeated SearchRequest search_requests = 2;
}

message QueryResponse {
  repeated LoadResponse load_responses = 1;
  repeated SearchResponse search_responses = 2;
}

message CreationRequest {
  // May be zero only if type is TopicMap.
  uint64 topic_map_id = 1;

  // May be zero only if type is TopicMap.
  uint64 parent = 2;

  // Must not be Library.
  ItemType item_type = 3;
}

enum Orderable {
  OrderableUnspecified = 0;
  OrderableNames = 1;
  OrderableOccurrences = 2;
}

message UpdateOrderRequest {
  uint64 topic_map_id = 1;
  uint64 id = 2;
  Orderable orderable = 4;
  repeated uint32 src_indices = 5;
  repeated uint32 dst_indices = 6;
}

message UpdateValueRequest {
  uint64 topic_map_id = 1;
  uint64 id = 2;
  ItemType item_type = 3;
  string value = 4;
}

message UpdateResponse {
  uint64 topic_map_id = 1;
  uint64 id = 2;
  Item item = 3;
}

message DeletionRequest {
  uint64 topic_map_id = 1;
  uint64 id = 2;
  ItemType item_type = 3;
}

message DeletionResponse {
  uint64 topic_map_id = 1;
  uint64 id = 2;
  ItemType item_type = 3;
}

message MutationRequest {
  repeated CreationRequest creation_requests = 1;
  repeated UpdateOrderRequest update_order_requests = 2;
  repeated UpdateValueRequest update_value_requests = 3;
  repeated DeletionRequest deletion_requests = 4;
}

message MutationResponse {
  repeated UpdateResponse creation_responses = 1;
  repeated UpdateResponse update_order_responses = 2;
  repeated UpdateResponse update_value_responses = 3;
  repeated DeletionResponse deletion_responses = 4;
}
